
##################
""" PIE CHARTS """
##################

"""
Pie Chart: illustrates numerical proportion.
"""

# generating pie chart
df_continents = df_canada.groupby("Continent", axis = 0).sum()  # processing df

import matplotlib as mpl
import matplotlib.pyplot as plt

df_continents["Total"].plot(king="pie")
plt.title("Immigration to Canada by Continent [1980-2013]")
plt.show()


#################
""" BOX PLOTS """
#################

"""
Box Plots: statistically representing dimensions of data.
"""

# generating box plots
import matplotlib as mpl
import matplotlib.pyplot as plt

df_japan = df_canada.loc[["Japan"], years].transpose()  # processing df

df_japan.plot(kind="box")
plt.title("Box Plot of Japanese Immigrants from 1980-2013")
plt.ylabel("Number of Immigrants")
plt.show()


#####################
""" SCATTER PLOTS """
#####################

"""
Scatter Plots: plots two variables against each other (independent/dependant).
"""

# generating scatter plots
import matplotlib as mpl
import matplotlib.pyplot as plt

df_total.plot(
    kind="scatter",
    x="year",
    y="total"
)

plt.title("Total Immigrant Population to Canada from 1980-2013")
plt.xlabel("Year")
plt.ylabel("Number of Immigrants")
plt.show()


#############################
""" FULL PROCESS PIE CHART"""
#############################

import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library

# download dataset and read Pandas dataframe
df_can = pd.read_excel(
    'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/Canada.xlsx',
    sheet_name='Canada by Citizenship',
    skiprows=range(20),
    skipfooter=2
    )

print('Data downloaded and read into a dataframe!')

# print the dimensions of the dataframe
print(df_can.shape)

# clean up the dataset to remove unnecessary columns (eg. REG)
df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)

# let's rename the columns so that they make sense
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)

# for sake of consistency, let's also make all column labels of type string
df_can.columns = list(map(str, df_can.columns))

# set the country name as index - useful for quickly looking up countries using .loc method
df_can.set_index('Country', inplace=True)

# add total column
df_can['Total'] = df_can.sum(axis=1)

# years that we will be using in this lesson - useful for plotting later on
years = list(map(str, range(1980, 2014)))
print('data dimensions:', df_can.shape)

##################################
# VISUALIZING DATA WITH MATPLOTLIB
##################################

%matplotlib inline

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.style.use('ggplot') # optional: for ggplot-like style

# check for latest version of Matplotlib
print('Matplotlib version: ', mpl.__version__) # >= 2.0.0

# group countries by continents and apply sum() function
df_continents = df_can.groupby('Continent', axis=0).sum()

# note: the output of the groupby method is a `groupby' object.
# we can not use it further until we apply a function (eg .sum())
print(type(df_can.groupby('Continent', axis=0)))

df_continents.head()

# autopct create %, start angle represent starting point
df_continents['Total'].plot(kind='pie',
                            figsize=(5, 6),
                            autopct='%1.1f%%', # add in percentages
                            startangle=90,     # start angle 90Â° (Africa)
                            shadow=True,       # add shadow
                            )

plt.title('Immigration to Canada by Continent [1980 - 2013]')
plt.axis('equal') # Sets the pie chart to look like a circle.

plt.show()

colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

df_continents['Total'].plot(kind='pie',
                            figsize=(15, 6),
                            autopct='%1.1f%%',
                            startangle=90,
                            shadow=True,
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct
                            colors=colors_list,  # add custom colors
                            explode=explode_list # 'explode' lowest 3 continents
                            )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12)

plt.axis('equal')

# add legend
plt.legend(labels=df_continents.index, loc='upper left')

plt.show()
